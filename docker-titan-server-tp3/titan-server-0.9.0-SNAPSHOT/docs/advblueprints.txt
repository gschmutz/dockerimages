[[advanced-blueprints]]
Advanced Tinkerpop
-------------------

http://tinkerpop.incubator.apache.org/[Tinkerpop] provides a set of common http://tinkerpop.incubator.apache.org/docs/3.0.0-SNAPSHOT/#traversalstrategy[traversal strategies] that add additional functionality to graphs.

Using ElementIdStrategy
~~~~~~~~~~~~~

It is possible to use http://tinkerpop.incubator.apache.org/docs/3.0.0-SNAPSHOT/#_elementidstrategy[ElementIdStrategy] with Titan. ElementIdStrategy allow an arbitrary property to be used as the element ID instead of Titans's long identifiers.

[IMPORTANT]
The target property key must be created and covered by a unique index in Titan prior to using `ElementIdStrategy` with Titan, otherwise Vertex lookups will result in sequential scans of the graph.

To prepare Titan for ElementIdStrategy, first create the property key. Set the `dataType` of the property key to match the custom IDs that you intend to use. Second, build a unique composite index on the property key. The following example shows how to define and index the property key to support IdGraph with string vertex IDs.

[source, gremlin]
g = TitanFactory.open("berkeleyje:/tmp/test")
// Define a property key and index for managed vertex IDs
mgmt = g.openManagement()
idKey = mgmt.makePropertyKey("name").dataType(String.class).make()
mgmt.buildIndex("byName", Vertex.class).addKey(idKey).unique().buildCompositeIndex()
mgmt.commit()
// Create an that manages vertex IDs but not edge IDs
strategy = ElementIdStrategy.build().idPropertyKey("name").create()
ig = GraphTraversalSource.build().with(strategy).create(g)

// Insert example vertex with custom identifier
hercules = ig.addV(T.id, "hercules")
ig.V("hercules")